{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","key","handleKeyPress","e","setState","document","addEventListener","this","removeEventListener","Component","ReactDOM","render","getElementById"],"mappings":"2MAMaA,EAAb,4MACEC,MAAQ,CACNC,IAAK,MAFT,EAaEC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACZH,IAAKE,EAAEF,OAfb,uDAKE,WACEI,SAASC,iBAAiB,QAASC,KAAKL,kBAN5C,kCASE,WACEG,SAASG,oBAAoB,QAASD,KAAKL,kBAV/C,oBAmBE,WACE,IAAQD,EAAQM,KAAKP,MAAbC,IAER,OACE,8BACGA,EAAG,kCAC2BA,GAC3B,gCA1BZ,GAAyBQ,a,MCDzBC,IAASC,OACP,cAAC,EAAD,IACAN,SAASO,eAAe,W","file":"static/js/main.6759c4c4.chunk.js","sourcesContent":["import { Component } from 'react';\n\ntype State = {\n  key: string | null\n};\n\nexport class App extends Component<{}, State> {\n  state = {\n    key: null,\n  };\n\n  componentDidMount() {\n    document.addEventListener('keyup', this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keyup', this.handleKeyPress);\n  }\n\n  handleKeyPress = (e: KeyboardEvent) => {\n    this.setState({\n      key: e.key,\n    });\n  };\n\n  render() {\n    const { key } = this.state;\n\n    return (\n      <div>\n        {key\n          ? `The last pressed key is ${key}`\n          : 'Nothing was pressed yet'}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}